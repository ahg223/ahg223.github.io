<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-11-10T17:54:07+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">선생보단 학생</title><subtitle>가르치는 것 보다 배우는 게 재밌더라</subtitle><author><name>ahg223</name></author><entry><title type="html">History of HTTP</title><link href="http://localhost:4000/moderncs/HTTP/" rel="alternate" type="text/html" title="History of HTTP" /><published>2019-11-09T00:00:00+09:00</published><updated>2019-11-09T00:00:00+09:00</updated><id>http://localhost:4000/moderncs/HTTP</id><content type="html" xml:base="http://localhost:4000/moderncs/HTTP/">&lt;h3 id=&quot;http-09-10-11-20-30&quot;&gt;HTTP 0.9, 1.0, 1.1, 2.0, 3.0&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Telnet&lt;/li&gt;
  &lt;li&gt;HTTP?
    &lt;ol&gt;
      &lt;li&gt;WWW에 내제된 프로토콜&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;0.9
    &lt;ul&gt;
      &lt;li&gt;버전이 없다가 1.0이 되면서 생김&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1.0 (헤더 추가)
    &lt;ul&gt;
      &lt;li&gt;버전 명시&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;1.1 (rest 고안)
    &lt;ul&gt;
      &lt;li&gt;HOL 없애기 위해 다음과 같은 임시방편 (&lt;a href=&quot;https://www.popit.kr/%EB%82%98%EB%A7%8C-%EB%AA%A8%EB%A5%B4%EA%B3%A0-%EC%9E%88%EB%8D%98-http2/&quot;&gt;https://www.popit.kr/나만-모르고-있던-http2/&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;HTTP/1.1 에서는 다수의 HTTP Request 들이 각각의 서버 소켓에 Write 된 후, Browser 는 각 Request 들에 대한 Response 들을 순차적으로 기다리는 문제를 해결하기 위해 여러 요청들에 대한 응답 처리를 뒤로 미루는 방법을 사용한다. ⇒ HOL을 미루기 위하여 응답을 미루는 방식을 하나 결국 멀티플렉싱이 아니므로 문제 생김 (&lt;a href=&quot;https://jins-dev.tistory.com/entry/HTTP11-%EC%9D%98-HTTP-Pipelining-%EA%B3%BC-Persistent-Connection-%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC&quot;&gt;https://jins-dev.tistory.com/entry/HTTP11-의-HTTP-Pipelining-과-Persistent-Connection-에-대하여&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;파이프라이닝이 고안되었지만 구현 복잡 및 구현해도 성능 미미 (&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTTP/Connection_management_in_HTTP_1.x&quot;&gt;https://developer.mozilla.org/ko/docs/Web/HTTP/Connection_management_in_HTTP_1.x&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;2.0 (Stream을 통한 멀티플렉싱 ⇒ HOL 해결)
    &lt;ul&gt;
      &lt;li&gt;1.1의 헤더 오버헤드를 없앰(필요없는거 쳐내고 압축 ⇒ hpack)&lt;/li&gt;
      &lt;li&gt;서버푸시에서 중복된 파일을 보낼 수 있음 ⇒ 오버헤드&lt;/li&gt;
      &lt;li&gt;Grpc가 2.0을 사용&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3.0 (UDP)
    &lt;ul&gt;
      &lt;li&gt;QUIC(Quick UDP Internet Connections) / &lt;a href=&quot;http://blog.naver.com/PostView.nhn?blogId=renucs&amp;amp;logNo=220887163028&quot;&gt;http://blog.naver.com/PostView.nhn?blogId=renucs&amp;amp;logNo=220887163028&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Hpack → Qpack&lt;/li&gt;
      &lt;li&gt;Hpack은 스트림 안에서의 순서가 중요하나 Qpack으로 바뀌면서 순서 보장이 필요 없어짐 ⇒ udp 사용 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>ahg223</name></author><category term="Network" /><category term="ModernCS" /><summary type="html">HTTP 0.9, 1.0, 1.1, 2.0, 3.0</summary></entry><entry><title type="html">Dining Philosophers Problem</title><link href="http://localhost:4000/dining-philosopher/" rel="alternate" type="text/html" title="Dining Philosophers Problem" /><published>2019-11-08T00:00:00+09:00</published><updated>2019-11-08T00:00:00+09:00</updated><id>http://localhost:4000/dining-philosopher</id><content type="html" xml:base="http://localhost:4000/dining-philosopher/">&lt;p&gt;세마포어와 뮤텍스, DeadLock과 같은 개념을 모르신다면 &lt;a href=&quot;/process-thread&quot;&gt;프로세스와 스레드&lt;/a&gt;와 &lt;a href=&quot;/critical-section&quot;&gt;임계영역&lt;/a&gt;포스트를 보고오시면 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;식사하는-철학자-문제&quot;&gt;식사하는 철학자 문제&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/44635266/68369600-09ca9580-017e-11ea-8f58-7c83fe50e3a6.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;철학자들은 생각하거나, 밥을먹거나, 배가고프거나 3가지 상태를 가질 수 있다. 철학자들은 밥을 먹을때 왼쪽 포크와 오른쪽 포크를 각 손에 하나씩 들어야 식사를 할 수 있다. 하지만 사람이 5명인데 포크는 5개밖에 없다. 그래서 최대 2명만 동시에 밥을 먹을 수 있다.&lt;/p&gt;

&lt;p&gt;프로세스가 어떤 공유자원(여기선 포크)을 가지고 아무한테도 주지 않으면서 다른 프로세스의 공유자원을 달라고 요구하게 되면 데드락이 발생 할 수 있다. 이것을 해결하기 위해서 세마포어를 사용해야 한다.&lt;/p&gt;

&lt;p&gt;mutex라는 이진 세마포어를 활용해서 포크를 손에 쥐는 행위를 하는것을 한 시점에 한 사람만 가능하게끔 해주고 각 프로세스 별로 세마포어를 또 따로 두어서 최대 2명까지 식사를 하게끔 해주어야 한다.&lt;/p&gt;

&lt;h3 id=&quot;해결방법&quot;&gt;해결방법&lt;/h3&gt;

&lt;p&gt;철학자들이 동시에 오른쪽 포크를 집어든 후 DeadLock이 발생하는 조건은 아래와 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;철학자들은 포크를 공유할 수 없고(상호 배제)&lt;/li&gt;
  &lt;li&gt;자신의 왼쪽에 앉은 철학자가 포크를 놓을 때까지 기다린다.(점유 대기)&lt;/li&gt;
  &lt;li&gt;철학자들은 왼쪽 철학자의 포크를 빼앗을 방법도 없으며,(선점 불가)&lt;/li&gt;
  &lt;li&gt;각 철학자들은 자신의 왼쪽 철학자의 포크를 대기한다.(순환대기)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그래서 나온 완벽한 해결책은 2번과 4번을 제거한것이다.&lt;/p&gt;

&lt;p&gt;한번에 포크를 하나만 들 수 있게 하는게 아니라 동시에 왼쪽 오른쪽 포크를 들게 한다.&lt;/p&gt;

&lt;p&gt;그리고 나서 각 프로세스마다 세마포어를 하나씩 두게 한다. 동시에 2개의 포크를 들게 한다는것은 점유대기를 없앤다는것이다.&lt;/p&gt;

&lt;p&gt;이렇게 하면 오른쪽 포크를 든 상태에서 왼쪽 프로세스의 포크를 얻을때 까지 기다리는 점유대기가 사라진다.&lt;/p&gt;

&lt;p&gt;동시에 2개의 포크를 들면 또 다른 포크를 얻기 위해서 기다리는 일이 없어진다. 따라서 점유대기가 사라진다.(2번제거) 또한 각 프로세스는 자기가 포크를 들었으면 또 포크를 달라고 요구하지 않으므로 덩달아 순환대기도 제거 된다. (데드락은 포크를 2개 동시에 드는 행위로 제거 되었다.)&lt;/p&gt;

&lt;p&gt;만약에 각 프로세스별로 세마포어가 없고 이진 세마포어로 포크를 들고 내려놓는 행위가 한번에 한 프로세스만 가능하게끔 해놨다고 가정해보자.&lt;/p&gt;

&lt;p&gt;그렇게 될 경우 1번 프로세스가 포크를 들었을때 0번과 2번 프로세스가 take_forks를 호출하게 되면 아무일도 없이 함수 호출이 끝나게 된다.&lt;/p&gt;

&lt;p&gt;그렇게 되면 eating()을 할꺼고 put_forks()를 차례로 호출하게 될텐데, 사실 1번 프로세스가 먹고있는 와중에 0번과 2번은 포크를 집을 수 없게 되서 1번이 식사를 마칠때까지 블락되어야 한다.&lt;/p&gt;

&lt;p&gt;그래서 각 프로세스별로 세마포어를 따로 두어서 1번이 식사중일때 양옆은 1번이 식사를 끝낼때 까지 기다리게끔 한 것이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Source Code (references / https://www.geeksforgeeks.org/)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;pthread.h&amp;gt; 
#include &amp;lt;semaphore.h&amp;gt; 
#include &amp;lt;stdio.h&amp;gt; 
  
#define N 5 
#define THINKING 2 
#define HUNGRY 1 
#define EATING 0 
#define LEFT (phnum + 4) % N 
#define RIGHT (phnum + 1) % N 
  
int state[N]; 
int phil[N] = { 0, 1, 2, 3, 4 }; 
  
sem_t mutex; 
sem_t S[N]; 
  
void test(int phnum) 
{ 
    if (state[phnum] == HUNGRY 
        &amp;amp;&amp;amp; state[LEFT] != EATING 
        &amp;amp;&amp;amp; state[RIGHT] != EATING) { 
        // state that eating 
        state[phnum] = EATING; 
  
        sleep(2); 
  
        printf(&quot;Philosopher %d takes fork %d and %d\n&quot;, 
                      phnum + 1, LEFT + 1, phnum + 1); 
  
        printf(&quot;Philosopher %d is Eating\n&quot;, phnum + 1); 
  
        // sem_post(&amp;amp;S[phnum]) has no effect 
        // during takefork 
        // used to wake up hungry philosophers 
        // during putfork 
        sem_post(&amp;amp;S[phnum]); 
    } 
} 
  
// take up chopsticks 
void take_fork(int phnum) 
{ 
  
    sem_wait(&amp;amp;mutex); 
  
    // state that hungry 
    state[phnum] = HUNGRY; 
  
    printf(&quot;Philosopher %d is Hungry\n&quot;, phnum + 1); 
  
    // eat if neighbours are not eating 
    test(phnum); 
  
    sem_post(&amp;amp;mutex); 
  
    // if unable to eat wait to be signalled 
    sem_wait(&amp;amp;S[phnum]); 
  
    sleep(1); 
} 
  
// put down chopsticks 
void put_fork(int phnum) 
{ 
  
    sem_wait(&amp;amp;mutex); 
  
    // state that thinking 
    state[phnum] = THINKING; 
  
    printf(&quot;Philosopher %d putting fork %d and %d down\n&quot;, 
           phnum + 1, LEFT + 1, phnum + 1); 
    printf(&quot;Philosopher %d is thinking\n&quot;, phnum + 1); 
  
    test(LEFT); 
    test(RIGHT); 
  
    sem_post(&amp;amp;mutex); 
} 
  
void* philospher(void* num) 
{ 
  
    while (1) { 
  
        int* i = num; 
  
        sleep(1); 
  
        take_fork(*i); 
  
        sleep(0); 
  
        put_fork(*i); 
    } 
} 
  
int main() 
{ 
  
    int i; 
    pthread_t thread_id[N]; 
  
    // initialize the semaphores 
    sem_init(&amp;amp;mutex, 0, 1); 
  
    for (i = 0; i &amp;lt; N; i++) 
  
        sem_init(&amp;amp;S[i], 0, 0); 
  
    for (i = 0; i &amp;lt; N; i++) { 
  
        // create philosopher processes 
        pthread_create(&amp;amp;thread_id[i], NULL, 
                       philospher, &amp;amp;phil[i]); 
  
        printf(&quot;Philosopher %d is thinking\n&quot;, i + 1); 
    } 
  
    for (i = 0; i &amp;lt; N; i++) 
  
        pthread_join(thread_id[i], NULL); 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ahg223</name></author><category term="식사하는 철학자" /><category term="DeadLock" /><summary type="html">세마포어와 뮤텍스, DeadLock과 같은 개념을 모르신다면 프로세스와 스레드와 임계영역포스트를 보고오시면 됩니다.</summary></entry><entry><title type="html">Critical Section</title><link href="http://localhost:4000/critical-section/" rel="alternate" type="text/html" title="Critical Section" /><published>2019-11-08T00:00:00+09:00</published><updated>2019-11-08T00:00:00+09:00</updated><id>http://localhost:4000/critical-section</id><content type="html" xml:base="http://localhost:4000/critical-section/">&lt;h2 id=&quot;동기화&quot;&gt;동기화&lt;/h2&gt;

&lt;p&gt;시스템의 자원은 한정적인데 이 한정적인 자원에 여러 스레드가 동시에 접근해서 사용하려하면 문제가 발생할 수도 있습니다. 이런 문제를 방지하기 위해 스레드들에게 하나의 자원에 대한 처리 권한을 주거나 순서를 조정해주는 기법입니다.&lt;/p&gt;

&lt;p&gt;공유된 자원 속 하나의 데이터는 한번에 하나의 프로세스만 접근할 수 있도록 제한해 두어야 할 필요성이 있는데 이를 위해 고안된 것이 Semaphore(세마포어)입니다.&lt;/p&gt;

&lt;p&gt;유명한 화장실 예제로 쉽게 설명해보겠습니다.&lt;/p&gt;

&lt;p&gt;공중 화장실은 한번에 1명만 사용할 수 있다고 가정하겠습니다. 어떤 사람이 사용하고 있는데 다른 누군가가 갑자기 들어와서 사용할 수가 없습니다. 또한, 화장실 안에 들어올 수 도 없고요.&lt;/p&gt;

&lt;p&gt;이를 위해 화장실 &lt;strong&gt;열쇠&lt;/strong&gt;를 만들어서 이용할 수 있습니다. 열쇠를 가지고 있는 한 사람만 화장실을 이용하고, 열쇠가 없는 사람은 밖에서 대기를 하죠. 여기서 열쇠는 세마포어와 같은 역할을 한다고 할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;임계영역critical-section&quot;&gt;임계영역(Critical Section)&lt;/h2&gt;

&lt;p&gt;둘 이상의 프로세스에 의해서 동시에 접근하면 안되는 공유자원에 접근하는 코드 영역이라고 한다. 다수의 프로세스가 접근 가능한 영역이면서 한 순간에 반드시 하나의 프로세스만 사용할 수 있는 영역입니다.&lt;/p&gt;

&lt;p&gt;위 그림에 Memory 구조에서 공유 메모리는 전역변수 Money가 있는 0x01F0 이며, 코드 영역은 5 ~ 7, 12 ~ 14번째 line입니다.&lt;/p&gt;

&lt;h2 id=&quot;semapore&quot;&gt;Semapore&lt;/h2&gt;

&lt;p&gt;프로세스간의 시그널(신호, Signal)을 주고받기 위해 사용되는 정수 값, 리소스의 상태를 나타내는 카운터로 세마포어는 다음 세가지 원자적인 연산만을 지원합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;initialize, decrement, increment&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;initialize : 세마포어 초기화. (음이 아닌 정수값으로 초기화)&lt;/li&gt;
  &lt;li&gt;decrement : 프로세스를 블록시킬 수 있습니다.&lt;/li&gt;
  &lt;li&gt;increment : 블록되었던 프로세스를 깨울 수 있습니다. 이 세마포어를 카운팅 세마포어 또는 범용 세마포어라고 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;세마포어의 값에 따라 운영체제는 프로세스가 즉시 자원을 사용할 지, 자원이 다른 프로세스에 의해 사용 중인걸 알게 될 경우엔 일정 시간을 기다려야 합니다.&lt;/p&gt;

&lt;p&gt;프로세스가 자원을 사용하는 동안에는 세마포어 값을 변경함으로서 다른 프로세스들이 기다리게 해야합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스간 메시지를 전송하거나 공유메모리를 통해 특정 데이터를 공유하게 될 경우 공유 자원에 여러 프로세스가 접근하면서 문제가 발생하게 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;하나의 프로세스만 자원에 접근 가능하도록 설정할 때 세마포어를 사용합니다.&lt;/p&gt;

&lt;p&gt;위 화장실 예제로 다시 살펴보면, 세마포어는 1개 이상의 &lt;strong&gt;열쇠&lt;/strong&gt;라고 할 수 있습니다. 만약 화장실 칸이 4개이고 열쇠가 4개라면, 4명까지는 대기없이 바로 사용할 수 있고  그 다음 부터는 대기를 해야하죠. 이것이 바로 세마포어입니다.&lt;/p&gt;

&lt;p&gt;그러므로 몇개의 세마포어로 구성해서 운영체제의 리소스를 경쟁적으로 사용할지는 꽤 중요한 이슈입니다.&lt;/p&gt;

&lt;p&gt;그림으로 표현하면 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/44635266/68373492-65991c80-0186-11ea-882a-be04a3765046.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;새머포어-연산&quot;&gt;새머포어 연산&lt;/h3&gt;

&lt;p&gt;세마포어는 다익스트라가 제안한 프로세스 동기화를 위한 구조로, 이는 여러 프로세스들에 의해 공유되는 변수로 정의된다. 그런데 이 변수는 보통의 방법으로는 액세스할 수 없고 오직 P와 V라는 연산으로만 다룰 수 있다. P와 V연산의 정의는 다음과 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;procedure P(S)   --&amp;gt; 최초 S값은 1임

    while S=0 do wait  --&amp;gt; S가 0면 1이 될때까지 기다려야 함
    S := S-1   --&amp;gt; S를 0로 만들어 다른 프로세스가 들어 오지 못하도록 함

end P

procedure V(S) --&amp;gt; 현재상태는 S가 0임

    S := S+1   --&amp;gt; S를 1로 원위치시켜 해제하는 과정. 이제는 다른 프로세스가 end V 들어 올수 있음
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;P와 V는 쪼갤수 없는 단일 연산이다. 즉 한 프로세스가 P나 V를 수행하고 있는 동안에는 프로세스가 인터럽트를 당하지 않는다. 이제 P와 V를 사용하면 다음과 같이 위험지역(cirtical section)에 대한 상호배제를 구현할수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    P(S);
    --------------------
    | Critical Section |
    --------------------
    V(S);           
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;최초에 S의 값은 1이다. 위와 같은 위험지역을 포함하는 두개의 프로세스 A와 B가 있다고 하자. A와 B는 서로 독립적으로 수행되지만, 두 프로세스가 동시에 위험 지역으로 들어가서는 안된다.&lt;/p&gt;

&lt;p&gt;위와 같이 세마포어를 사용하면 P(S)를 먼저 수행하는 프로세스가 S를 0으로 해놓고 위험지역에 들어가므로 나중에 도착하는 프로세스는 P에서 더이상 진행되지 못하고 기다리게 된다.&lt;/p&gt;

&lt;p&gt;먼저 들어갔던 프로세스가 V(S)를 해주어야 비로서 P(S)에서 기다리던 프로세스가 위험지역에 들어갈 수 있고 따라서 상호배제가  실현된다.&lt;/p&gt;

&lt;h2 id=&quot;mutex&quot;&gt;Mutex&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;MUTual EXclusion&lt;/em&gt;으로 상호배제라고도 합니다.&lt;/p&gt;

&lt;p&gt;0또는 1의 값을 가지는 이진 세마포어와 유사합니다. Critical Section (임계구역)을 가진 스레드들의 실행 시간을 서로 겹치지 않게 단독으로 실행하게 하는 기술입니다. 즉, 공유된 자원의 데이터를 여러 쓰레드가 접근하는 것을 막는 것이라고 보면 됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스들의 공유 리소스에 대한 접근을 조율하기 위해 Locking과 Unlocking을 사용합니다.&lt;/li&gt;
  &lt;li&gt;뮤텍스 객체를 두 스레드가 동시에 사용할 수 없습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;즉, Critical Section을 가진 쓰레드들의 Running tme이 서로 겹치지 않게 각각 단독으로 실행되게 하는 기술입니다. 다중 프로세스들이 공유 리소스에 대한 접근을 조율하기 위해 locking과 unlocking을 사용합니다.&lt;/p&gt;

&lt;p&gt;간단히 말해, Mutex객체를 두 쓰레드가 동시에 사용할 수 없다는 말입니다.&lt;/p&gt;

&lt;p&gt;위 화장실 예제로 다시 살펴보면, 뮤텍스는 무조건 1개의 &lt;strong&gt;열쇠&lt;/strong&gt;만 가질 수 있습니다.&lt;/p&gt;

&lt;p&gt;그림으로 표현하면 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/44635266/68373496-6762e000-0186-11ea-8189-a89f2569022b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;semaphore-vs-mutex&quot;&gt;Semaphore vs Mutex&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;세마포어는 뮤텍스가 될 수 있지만, 뮤텍스는 세마포어가 될 수 없습니다.&lt;/li&gt;
  &lt;li&gt;세마포어는 소유할 수 없으며, 뮤텍스는 소유할 수 있고 소유주가 그에 대한 책임을 집니다.&lt;/li&gt;
  &lt;li&gt;뮤텍스의 경우 뮤텍스를 소유하고있는 스레드가 이 뮤텍스를 해제할 수 있습니다. 하지만, 세마포어는 소유하지 않고 있는 스레드가 세마포어를 해제할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;세마포어는 시스템 범위에 걸쳐있고 파일 시스템 상의 파일 형태로 존재합니다. 하지만, 뮤텍스는 프로세스 범위를 가지고 프로그램이 종료될 때 자동으로 지워집니다.&lt;/li&gt;
  &lt;li&gt;세마포어는 동기화 대상이 여러개 일 때, 뮤텍스는 동기화 대상이 오로지 하나 일 때 사용됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;monitor&quot;&gt;Monitor&lt;/h2&gt;

&lt;p&gt;동기화 문제를 해결하기 위해서 우리는 Semaphore와 Mutex라는 도구를 사용하였다. 하지만 동기화 문제를 해결하는데 세마포만이 사용되지는 않는다. 사실 세마포의 경우 오래된 동기화 도구라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;현재 사용되는 도구 중 하나가 모니터이다. 특히 자바 프로그램에서는 모니터에 대한 활용이 높다. 세마포가 어셈블리 언어에 적합한 도구라면 모니터는 그보다 고수준인 언어의 도구라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;공유자원과 공유자원에 대한 접근함수가 존재한다. 이러한 구역을 임계구역이라고 한다. 모니터의 경우 두 개의 queue가 있는데 각각 배타동기와 조건동기의 역할을 한다. 배타동기의 queue는 하나의 쓰레드만 공유자원에 접근할 수 있게 하는 작용을 하는 공간이다.&lt;/p&gt;

&lt;p&gt;특정 쓰레드가 공유자원을 사용하는 함수를 사용하고 있으면 다른 쓰레드는 접근을 할 수 없고 대기해야 한다. 조건 동기의 queue는 진입 쓰레드가 블록되면서 새 쓰레드가 진입가능하게 하는 공간이다. 새 쓰레드는 조건동기로 블록된 쓰레드를 깨울 수 있다. 깨워진 쓰레드는 현재 쓰레드가 나가면 재진입할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/44635266/68396979-cbe96380-01b5-11ea-9f2d-07ba87c90593.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/44635266/68396981-cd1a9080-01b5-11ea-9734-355d8b86a19b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/44635266/68396987-cee45400-01b5-11ea-9702-914760d6d2b5.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자바의 모든 객체는 모니터가 될 수 있다. 배타 동기는 synchronized 키워드를 사용해서 지정할 수 있고 조건 동기는 wait()함수와 notify()함수, notifyAll()함수를 사용한다. 배타 동기를 지정하는 함수들은 공통 자원을 사용하고 있는 경우이다. 공통 자원을 사용할 경우 배타 동기를 선언하는 synchronized라는 키워드를 적어주기만 하면 상호배타의 원리를 만족시키는 함수로 만들어준다. 조건 동기의 경우 wait()함수를 실행하면 진입한 쓰레드를 조건 동기 queue에 블록을 시킨다. notify()함수는 그렇게 블록된 함수를 깨우는데 새로운 쓰레드가 실행하는 방식으로 깨우게 된다. notifyAll()은 모든 쓰레드를 깨우는 것으로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;세마포의 경우와 비교를 해볼 수 있다. 세마포의 경우 임계구역 앞에 설치되어 초기 값을 설정해 들어갈 수 있는 한계를 놓는다. 들어갈 때 acquire()명령하고 나올 때는 release()명령을 실행시켜 주어야한다. 하지만 이런 관계를 기억하는 것이 힘들다. 이와 반대로 모니터는 따로 명령을 불러줄 필요 없이 함수에 synchronized만 붙여 넣으면 상호배타의 기능을 수행할 수 있다.&lt;/p&gt;</content><author><name>ahg223</name></author><category term="Critical Section" /><category term="Semaphores" /><category term="Mutex" /><summary type="html">동기화</summary></entry><entry><title type="html">Banker’s Algoirhtm</title><link href="http://localhost:4000/banker-algorithm/" rel="alternate" type="text/html" title="Banker's Algoirhtm" /><published>2019-11-08T00:00:00+09:00</published><updated>2019-11-08T00:00:00+09:00</updated><id>http://localhost:4000/banker-algorithm</id><content type="html" xml:base="http://localhost:4000/banker-algorithm/">&lt;p&gt;세마포어와 뮤텍스, DeadLock과 같은 개념을 모르신다면 &lt;a href=&quot;/process-thread&quot;&gt;프로세스와 스레드&lt;/a&gt;와 &lt;a href=&quot;/critical-section&quot;&gt;임계영역&lt;/a&gt;포스트를 보고오시면 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;은행원-알고리즘bankers-alogirthm&quot;&gt;은행원 알고리즘(Banker’s Alogirthm)&lt;/h2&gt;

&lt;p&gt;은행원 알고리즘은 교착상태 회피 대표 기법입니다.&lt;/p&gt;

&lt;p&gt;교착상태에 빠질 가능성이 있는지 판단하기 위해 상태를 ‘안전상태(safe state)’와 ‘불안전상태(unsafe state)’로 나눴습니다. 즉, &lt;strong&gt;은행원 알고리즘에서 운영체제는 안전상태를 유지할 수 있는 요구만을 수락하고 불안전 상태를 초래할 사용자의 요구는 나중에 만족될 수 있을 때까지 계속 거절합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;그래서 은행원 알고리즘은 ‘최소한 고객 한명에게 대출해줄 금액은 항상 은행이 보유하고 있어야 한다’는 개념에서 나옵니다.&lt;/p&gt;

&lt;h2 id=&quot;은행원-알고리즘에-사용되는-개념&quot;&gt;은행원 알고리즘에 사용되는 개념&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/44635266/68369206-113d6f00-017d-11ea-8069-c5def5a07709.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;안전상태 (Safe State)
    &lt;ul&gt;
      &lt;li&gt;시스템이 교착상태를 일으키지 않으면서 각 프로세스가 요구한 최대 요구량만큼 필요한 자원을 할당해 줄 수 있는 상태로 안전순서열이 존재하는 상태를 말합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;불안전상태 (Unsafe State):
    &lt;ul&gt;
      &lt;li&gt;안전순서열이 존재하지 않는 상태를 말합니다. 불안전상태는 교착상태이기 위한 필요조건입니다. 교착상태는 불안전상태에서만 발생합니다. Unsafe state라고 해서 무조건 교착상태가 발생하는 것은 아닙니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Max
    &lt;ul&gt;
      &lt;li&gt;각 프로세스가 자원을 얼마나 요청할 수 있는지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Allocated
    &lt;ul&gt;
      &lt;li&gt;각 프로세스가 현재 보유하고 있는 자원은 얼마인지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Available
    &lt;ul&gt;
      &lt;li&gt;시스템이 얼마나 자원을 보유하고 있는지.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Need
    &lt;ul&gt;
      &lt;li&gt;프로세스가 작업을 완료하기위해 필요한 자원의 개수&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;은행원-알고리즘-단점&quot;&gt;은행원 알고리즘 단점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;할당할 수 있는 자원의 수가 일정해야 합니다.&lt;/li&gt;
  &lt;li&gt;사용자 수가 일정해야 합니다.&lt;/li&gt;
  &lt;li&gt;항상 불안전 상태를 방지해야 하므로 자원 이용도가 낮습니다.&lt;/li&gt;
  &lt;li&gt;최대 자원 요구량을 미리 알아야 합니다.&lt;/li&gt;
  &lt;li&gt;프로세스들은 유한한 시간 안에 자원을 반납해야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Source Code (references / https://www.geeksforgeeks.org/)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Banker's Algorithm 
#include &amp;lt;stdio.h&amp;gt; 
#include &amp;lt;iostream&amp;gt;

using namespace std;

int main() 
{ 
    // P0, P1, P2, P3, P4 are the Process names here 
  
    int n, m, i, j, k; 
    n = 5; // Number of processes 
    m = 3; // Number of resources 
    int alloc[5][3] = { { 0, 1, 0 }, // P0    // Allocation Matrix 
                        { 2, 0, 0 }, // P1 
                        { 3, 0, 2 }, // P2 
                        { 2, 1, 1 }, // P3 
                        { 0, 0, 2 } }; // P4 
  
    int max[5][3] = { { 7, 5, 3 }, // P0    // MAX Matrix 
                      { 3, 2, 2 }, // P1 
                      { 9, 0, 2 }, // P2 
                      { 2, 2, 2 }, // P3 
                      { 4, 3, 3 } }; // P4 
  
    int avail[3] = { 3, 3, 2 }; // Available Resources 
  
    int f[n], ans[n], ind = 0; 
    for (k = 0; k &amp;lt; n; k++) { 
        f[k] = 0; 
    } 
    int need[n][m]; 
    for (i = 0; i &amp;lt; n; i++) { 
        for (j = 0; j &amp;lt; m; j++) 
            need[i][j] = max[i][j] - alloc[i][j]; 
    } 
    int y = 0; 
    for (k = 0; k &amp;lt; 5; k++) { 
        for (i = 0; i &amp;lt; n; i++) { 
            if (f[i] == 0) { 
                
                int flag = 0; 
                for (j = 0; j &amp;lt; m; j++) { 
                    if (need[i][j] &amp;gt; avail[j]){ 
                        flag = 1; 
                         break; 
                    } 
                } 
  
                if (flag == 0) { 
                    ans[ind++] = i; 
                    for (y = 0; y &amp;lt; m; y++) 
                        avail[y] += alloc[i][y]; 
                    f[i] = 1; 
                } 
            } 
        } 
    } 
  
    printf(&quot;Following is the SAFE Sequence\n&quot;); 
    for (i = 0; i &amp;lt; n - 1; i++) 
        printf(&quot; P%d -&amp;gt;&quot;, ans[i]); 
    printf(&quot; P%d&quot;, ans[n - 1]); 
  
    return (0); 
  
    // This code is contributed by Deep Baldha (CandyZack) 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ahg223</name></author><category term="Banker's Algorithm" /><category term="DeadLock" /><category term="DeadLock Avoidance" /><summary type="html">세마포어와 뮤텍스, DeadLock과 같은 개념을 모르신다면 프로세스와 스레드와 임계영역포스트를 보고오시면 됩니다.</summary></entry><entry><title type="html">가상머신부터 오케스트레이션 툴 까지</title><link href="http://localhost:4000/moderncs/os-k8s/" rel="alternate" type="text/html" title="가상머신부터 오케스트레이션 툴 까지" /><published>2019-11-08T00:00:00+09:00</published><updated>2019-11-08T00:00:00+09:00</updated><id>http://localhost:4000/moderncs/os-k8s</id><content type="html" xml:base="http://localhost:4000/moderncs/os-k8s/">&lt;h2 id=&quot;커널과-os&quot;&gt;커널과 OS&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34998051/68454527-4230a900-023c-11ea-9149-0d8c100eee65.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;대부분의 컴퓨터는 CPU, 보조기억장치(HDD, SSD), 무선 랜 카드 등의 하드웨어로 이루어져 있고, 하드웨어와 상호작용하는 소프트웨어가 내장된다. 그러한 소프트웨어 중 운영체제는 이러한 하드웨어와 소프트웨어를 운영하는 역할을 수행한다.&lt;/p&gt;

&lt;p&gt;그러한 운영체제 안에는 커널이 있는데, 이것은 소프트웨어와 하드웨어 간의 다리 역할을 수행한다. 어렵게 얘기하면 프로세스(소프트웨어의 최소 단위)의 스케쥴링, 디스크 혹은 메모리 읽고 쓰기 등을 해낸다. 위의 이미지와 같이 OS는 사용자가 사용자 공간을 사용함에 있어서 문제가 없도록 관리하고 운영해주는 역할을 수행한다.&lt;/p&gt;

&lt;h2 id=&quot;virtual-machine&quot;&gt;Virtual Machine&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34998051/68454799-182bb680-023d-11ea-94b3-07ca683e8869.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이러한 운영체제는 당연히 많은 종류가 있고, 호환이 안되는 경우가 많다. 예를 들면 맥 OS와 윈도우가 그렇다.
이러한 경우들 때문에 하나의 컴퓨터에 여러 운영체제를 띄우려는 시도가 나오고, 그 중 하나가 바로 가상 머신이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34998051/68455160-f979ef80-023d-11ea-9f65-f4bb759b0d74.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이미 운영체제(Host OS)가 존재하는 컴퓨터 위에 필요한 운영체제(Guest OS)를 올리고, 이 운영체제(Guest OS)에게 마치 하드웨어가 연결된 듯 속이는 소프트웨어(하이퍼바이저) 위에서 동작하게 만들어 속이는 것이다. 마치 위 그림과 같아지는데, 이때 host OS도 없이 하이퍼 바이저가 전부 관리하는 베어메탈 방식 등 여러 방식으로 가상 머신은 구성되고 운영된다.&lt;/p&gt;

&lt;h2 id=&quot;cgroups&quot;&gt;cgroups&lt;/h2&gt;
&lt;p&gt;control groups의 줄임말인 cgroups는 리눅스 OS의 커널 기능 중 유저 프로세스의 리소스를 관리하는 커널 기능이다. 이것은 여러 프로세스와 스레드(프로세스 내부의 작업 단위)를 그룹화(네임스페이스)하여 관리하는데, 그 수준이 매우 높았다. 간단히 말하자면, 네임스페이스 내부의 프로세스 들에게 해당 네임스페이스는 고유한 하나의 가상머신으로 보일 정도이다. 자세히 말하자면, 각각의 네임스페이스는 CPU 사용량 제한 및 메모리 배치 및 사용량 제어, 디바이스 입출력 량 제어, 네트워크 인터페이스 제어, 서로 다른 네임스페이스 간 PID 조회 불가능 등이 있다.&lt;/p&gt;

&lt;h2 id=&quot;containers&quot;&gt;Containers&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34998051/68455727-6641b980-023f-11ea-9852-69ca00deea4d.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;cgroups는 LXC(linux container) 기술의 기반이 되었다. 다른 OS 구동을 위한 가상 머신에는 하이퍼바이저와 관련 host os와의 동기화 등 많은 작업이 필요했고, 꽤 부담이 되었다. 하지만 cgroups는 네임스페이스 분리를 통해 각각의 프로세스에게 네트워크 스페이스까지 격리된 가상 환경을 제공할 수 있게 해주었다. 이러한 리눅스 컨테이너 기술을 기반으로 많은 컨테이너 기술이 생겨났고, 그 중 산업 표준이 된 기술이 바로 Docker이다.&lt;/p&gt;

&lt;h2 id=&quot;docker&quot;&gt;Docker&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34998051/68456124-54144b00-0240-11ea-800d-e9064bd186a2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;오늘날 컨테이너라 하면 대부분 Docker를 가르킬 정도로 유명한 오픈소스이다. cgroups, linux 커널과 윈도우 환경에서는 윈도우가 제공하는 네임 스페이스 기술을 기반으로 발전하였다. 다른 컨테이너와 공통점은, 하나의 OS가 이미지로 저장된 뒤 추후에 가상 환경을 구축하기 위하여 구동되는데, 이 OS 안에는 파일 시스템, 바이너리, 커널 등을 전부 포함해야 하지만 이 이미지는 오직 파일 시스템과 바이너리만 포함하여 가볍다는 점이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34998051/68456475-30053980-0241-11ea-90f2-2b9a8c0c4355.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기존 컨테이너와 차이점을 짚어보자면, 도커의 유니온 파일 시스템이 있다. 도커의 이미지는 여러 이미지의 레이어로 구성되어 수정이 되는 만큼만 업데이트하면 된다. 예를 들어, 4gb 크기의 이미지 중 3mb만큼 수정이 더해졌다면 이를 다시 이미지로 만들 때 4.003gb를 다시 이미지로 만드는 것이 아니라 3mb만큼 만 업데이트가 되어 속도가 빠르다. 또 다른 예시를 들어보자면, 하나의 컴퓨터 위에 a b d로 구성된 이미지와 a b c로 구성된 이미지를 돌려야한다고 가정하자. 이때, 해당 컴퓨터에는 a b c d가 한개씩 저장된 뒤 위 사진처럼 a b를 공유한다. 그 후 각 이미지를 구동시키고 cgroup과 네임스페이스를 생성해 각각의 가상 환경은 완전히 독립된 머신과 같이 운영된다.&lt;/p&gt;

&lt;p&gt;이러한 컨테이너는 경량성 그 이상의 장점이 있다. docker만 설치되어 있다면, OS가 ubuntu, MacOS, Windows, CentOS 등 상관없이 컨테이너 내부는 설정한 OS가 되어 동작한다는 점이다. 또한 표준화된 작업 또는 연산의 단위가 되었다. 예를 들어, DB를 sharding하려 한다면 DB 하나를 이미지로 만들어 여러 개의 컨테이너로 작동시키면 된다. 각각의 DB에게 cpu, ram, 스레드 수 등 여러 세세한 리소스를 할당하고 조정하던 전과는 다르게 “컨테이너 몇개를 띄우냐”는 훨씬 쉬운 추상화를 제공한다.&lt;/p&gt;

&lt;h2 id=&quot;orchestarion&quot;&gt;Orchestarion&lt;/h2&gt;
&lt;p&gt;그렇다면 몇 백개의 가상 머신에 몇 만개의 컨테이너를 배포하고 싶다면 도커로 충분할까? 컨테이너 간 네트워킹과 volume 개념 등 docker는 이러한 것들을 훨씬 쉽게 만들어 주었지만 부족한 부분이 많다. 가상 머신 간의 네트워킹, 갑작스런 컨테이너 크러쉬 혹은 다운에 대한 대응, 업그레이드나 롤백 같은 시시각각 변하는 시스템 성질 처리 자동화에 있어 docker 하나만으로는 아직 역부족이다.&lt;/p&gt;

&lt;p&gt;이러한 것을 돕기 위하여 새로 생겨난 툴이 바로 orchestration이다. 컨테이너에 대한 로드 밸런싱 부터 새로운 컨테이너로 모든 리소스를 적용, 클라이언트가 모르게 자동화 된 복구를 실행하며 특별한 이미지 구성 없이 암호와 같이 중요한 정보를 따로 저장하고 관리할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://goofcode.github.io/container-101&quot;&gt;참고 자료&lt;/a&gt;&lt;/p&gt;</content><author><name>ahg223</name></author><category term="OS" /><category term="Docker" /><category term="Kubernetes" /><summary type="html">OS, VM, cgroup, container, orchastration</summary></entry><entry><title type="html">Protocol Stack</title><link href="http://localhost:4000/protocol-stack/" rel="alternate" type="text/html" title="Protocol Stack" /><published>2019-11-08T00:00:00+09:00</published><updated>2019-11-08T00:00:00+09:00</updated><id>http://localhost:4000/protocol-stack</id><content type="html" xml:base="http://localhost:4000/protocol-stack/">&lt;h2 id=&quot;protocol-stack-이란&quot;&gt;Protocol Stack 이란&lt;/h2&gt;

&lt;p&gt;컴퓨터들이 네트워크를 통해 데이터를 주고 받기 위해서는 프로토콜이 필요하다고 말씀 드렸습니다. 사용되고 있는 프로토콜의 종류는 여러 가지들이 있는데요. 이들이 어떤 구조로 이뤄져 있는지를 알아야 합니다. 이것이 바로 컴퓨터 네트워크를 이해하기 위한 초석입니다.&lt;/p&gt;

&lt;p&gt;프로토콜 스택(protocol stack)은 계층화된 구조(layered architecture)로 모여 있는 프로토콜들의 집합을 말합니다. 계층을 나누는 목적은 매우 복잡한 네트워크에서 프로토콜들의 역할을 분담하기 위해서입니다. 한 계층에 속하는 하나의 프로토콜이 인접한 계층의 다른 프로토콜과 통신을 합니다. 이러한 방식으로 꼭대기 계층에서부터 가장 아래에 있는 계층까지 또는 그 반대 방향으로 프로토콜 스택 내에서 통신이 이루어집니다. 컴퓨터 간의 물리적인 데이터 송수신은 가장 아래 계층에서 이루어집니다.&lt;/p&gt;

&lt;p&gt;**즉, 프로토콜 스택이란 간단히 프로토콜의 집합이라고 생각하시면 됩니다. **&lt;/p&gt;

&lt;h2 id=&quot;protocol-stack-architecture&quot;&gt;Protocol Stack Architecture&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/44635266/68398142-a1000f00-01b7-11ea-9594-d46ba678a6ae.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OSI 7 Layer&lt;/strong&gt;와 &lt;strong&gt;TCP/IP 4 Layer&lt;/strong&gt;와 비교해보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/44635266/68398144-a198a580-01b7-11ea-8ad5-ca71735fad7a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;TCP/IP 와 같이 Application Layer는 합쳐져있지만 Physical Layer 와 DataLink Layer가 분리되있는것에 대해 차이점이 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;protocol-stack-data-type&quot;&gt;Protocol Stack Data Type&lt;/h2&gt;

&lt;p&gt;데이터 타입과 프로토콜은 &lt;a href=&quot;/osi-layer&quot;&gt;OSI 7 Layer&lt;/a&gt; 포스트와 각각의 레이어 별 포스트를 확인하면 자세히 알 수 있으니 간략하게 적겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;application-layer&quot;&gt;Application Layer&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;데이터 종류&lt;/strong&gt; : Message&lt;/p&gt;

&lt;p&gt;어플리케이션 계층이 보낼 데이터입니다. 파일 전송을 목적으로 하는 FTP의 경우 파일의 일부가 메시지에 포함됩니다.&lt;/p&gt;

&lt;h3 id=&quot;transport-layer&quot;&gt;Transport Layer&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;데이터 종류&lt;/strong&gt; : Segment&lt;/p&gt;

&lt;p&gt;메시지에 세그먼트 헤더를 결합하여 세그먼트가 생성됩니다. 세그먼트 헤더는 이 계층들 사이의 통신에 필요한 부가적인 데이터들을 담습니다.&lt;/p&gt;

&lt;h3 id=&quot;network-layer&quot;&gt;Network Layer&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;데이터 종류&lt;/strong&gt; : Datagram&lt;/p&gt;

&lt;p&gt;세그먼트에 데이터그램 헤더를 결합하여 데이터그램이 생성됩니다. 데이터그램 헤더도 이 계층들의 통신에 필요한 부가적인 데이터들을 담습니다. IP 프로토콜의 경우 IP 주소가 데이터그램의 헤더에 포함됩니다.&lt;/p&gt;

&lt;h3 id=&quot;datalink-layer&quot;&gt;DataLink Layer&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;데이터 종류&lt;/strong&gt; : Frame&lt;/p&gt;

&lt;p&gt;데이터그램에 프레임 헤더를 결합하여 프레임이 생성됩니다. 프레임 헤더 역시 링크 계층들의 통신에 필요한 데이터들을 갖습니다.&lt;/p&gt;

&lt;h3 id=&quot;physical-layer&quot;&gt;Physical Layer&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;데이터 종류&lt;/strong&gt; : Bit&lt;/p&gt;

&lt;p&gt;프레임을 구성하는 비트들입니다. 이들이 유선/무선으로 전송하기 위해 신호로 바뀝니다. 수신측에서는 이들을 다시 비트로 원복합니다.&lt;/p&gt;</content><author><name>ahg223</name></author><category term="Protocol Stack" /><summary type="html">Protocol Stack 이란</summary></entry><entry><title type="html">Network Gateway</title><link href="http://localhost:4000/network-gateway/" rel="alternate" type="text/html" title="Network Gateway" /><published>2019-11-08T00:00:00+09:00</published><updated>2019-11-08T00:00:00+09:00</updated><id>http://localhost:4000/network-gateway</id><content type="html" xml:base="http://localhost:4000/network-gateway/">&lt;h2 id=&quot;gateway&quot;&gt;Gateway&lt;/h2&gt;

&lt;p&gt;게이트웨이(gateway)는 ‘관문’이나 ‘출입구’라는 의미로 다양한 분야에서 일반적으로 사용되는 용어다. 컴퓨터 네트워크에서의 게이트웨이는 현재 사용자가 위치한 네트워크(정확히는 세그먼트-segment)에서 다른 네트워크(인터넷 등)로 이동하기 위해 반드시 거쳐야 하는 거점을 의미한다. 자동차 고속도로로 진입하기 위해 통과하는 톨게이트(tollgate)와 유사한 개념이다.&lt;/p&gt;

&lt;p&gt;두 컴퓨터(노드-node라고도 함)가 네트워크 상에서 서로 연결되려면 동일한 통신 프로토콜(protocol, 통신 규약)을 사용해야 한다. 따라서 프로토콜이 다른 네트워크 상의 컴퓨터와 통신하려면 두 프로토콜을 적절히 변환해 주는 변환기가 필요한데, 게이트웨이가 바로 이러한 변환기 역할을 한다. 한국인과 미국인 사이에 원활한 의사소통을 위해 통역사를 두는 것과 동일하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/44635266/68399503-d574ca80-01b9-11ea-9f06-bd99611c9589.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;게이트웨이는 일반적으로 하드웨어 형태로 제공되며, 내부적으로 복잡한 원리로 작동하지만 외형은 생각보다 간단하다. 흔히 보는 네트워크 허브나 스위치 등과 비슷하게 생겼다.&lt;/p&gt;

&lt;p&gt;게이트웨이는 또한 라우터(router)와 동일한 개념으로 이해할 수 있다. 라우터는 네트워크 장비의 일종으로,패킷(packet, 네트워크 전송 데이터의 최소 단위)을 다른 네트워크 보내주는(forward) 역할을 한다. 이와 함께 최적의 네트워크 경로를 찾아주는 역할도 함께 수행한다. 이렇듯 라우터도 이기종 네트워크를 연결한다는 부분에서 게이트웨이와 상통한다(다만 게이트웨이는 라우터보다 포괄적인 개념이다).&lt;/p&gt;

&lt;p&gt;실생활에서 간단히 찾아볼 수 있는 인터넷 유무선 공유기(이하 공유기)가 우리가 만나는 첫 번째 게이트웨이다. 공유기는 사용자 컴퓨터의 네트워크와 인터넷을 연결하여 사용자가 웹 사이트에 접근할 수 있도록 관문을 열어 준다. 사용자가 속해 있는 (로컬) 네트워크의 통신 프로토콜(예, netbios)과 인터넷의 통신 프로토콜(예, http)이 다르기 때문이다. 참고로 공유기는 게이트웨이의 역할과 라우터의 역할, 방화벽 역할 등을 동시에 제공하는 종합 네트워크 장비다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/44635266/68399508-d6a5f780-01b9-11ea-854a-c2188a4d92aa.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하지만, 게이트웨이는 하나 이상의 프로토콜을 사용하여 통신한다는 면에서 라우터, 스위치와는 구별되며 OSI 참조 모델의 7계층 가운데 어느 곳에서도 동작이 가능하므로 전송방식이 다른 통신망도 흡수함으로써 서로 다른 기종끼리도 접속을 가능하게 한다.&lt;/p&gt;

&lt;p&gt;한편 자신의 컴퓨터에서 목적지 네트워크까지 도달하기까지 여러 개의 게이트웨이를 거칠 수 있다. 고속도로를 갈아탈 때마다 톨게이트를 지나야 하는 것과 다름 없다. 또한 톨게이트를 지날 때마다 통행료가 부가되듯, 게이트웨이를 거칠 때마다 네트워크 부하(트래픽, traffic)도 증가하여 전송 속도가 느려질 수 있다(이때 거치는 게이트웨이의 수를 ‘홉 카운트’-hop count-라고도 한다).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;인터넷을 위한 필수 조건&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;해당 컴퓨터가 속해 있는 (로컬) 네트워크 구역 내에서는 IP 주소와 서브넷마스크(subnet mask)만 있어도 주변 컴퓨터와 통신이 가능하다. 다른 네트워크 구역으로 나갈 필요가 없기 때문이다. 하지만 인터넷 등의 이기종 네트워크로 나가기 위해서는 게이트웨이(라우터 등)가 있어야 하고, IP 주소, 서브넷 마스크와 함께 게이트웨이 주소까지 정확하게 설정해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/44635266/68399611-01904b80-01ba-11ea-9358-4184d5ef0aad.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;컴퓨터가 서로 통신하기 위해서는 모든 컴퓨터마다 유일한 IP 주소를 할당해야 하듯, 게이트웨이에도 중복되지 않는 IP 주소가 필요하다. 이 IP 주소를 토대로 각 컴퓨터가 다른 네트워크와 연결된다. 일반적으로 게이트웨이의 IP 주소는 해당 네트워크 내 컴퓨터에 할당된 IP 주소 중 끝자리(4번째 옥텟)만 다른 형태다. 대게 1을 지정한다. 이를 테면 컴퓨터 IP 주소가 123.123.123.123이라면, 게이트웨이 주소는 123.123.123.1이 된다. 물론 게이트웨이 IP 주소 설정이 잘못되면 외부 네트워크(인터넷) 연결이 불가능하다.&lt;/p&gt;</content><author><name>ahg223</name></author><category term="Network" /><category term="Gateway" /><summary type="html">Gateway</summary></entry><entry><title type="html">Sync vs Async / Blocking vs Non-Blocking</title><link href="http://localhost:4000/syncasync-nonblock/" rel="alternate" type="text/html" title="Sync vs Async / Blocking vs Non-Blocking" /><published>2019-11-07T00:00:00+09:00</published><updated>2019-11-07T00:00:00+09:00</updated><id>http://localhost:4000/syncasync-nonblock</id><content type="html" xml:base="http://localhost:4000/syncasync-nonblock/">&lt;h2 id=&quot;synchronous--asynchronous&quot;&gt;Synchronous / Asynchronous&lt;/h2&gt;

&lt;p&gt;호출되는 함수의 작업완료 여부를 누가 신경쓰냐의 문제입니다.&lt;/p&gt;

&lt;p&gt;호출되는 함수에게 callback을 전달해서, 호출되는 함수의 작업이 완료되면 호출되는 함수가 전달받은 callback을 실행하고, 호출하는 함수는 작업 완료 여부를 신경쓰지 않으면 Asynchronous다.&lt;/p&gt;

&lt;p&gt;호출하는 함수가 호출되는 함수의 작업 완료 후 리턴을 기다리거나, 또는 호출되는 함수로부터 바로 리턴 받더라도 작업 완료 여부를 호출하는 함수 스스로 계속 확인하며 신경쓰면 Synchronous다.&lt;/p&gt;

&lt;h2 id=&quot;blockingnonblocking&quot;&gt;Blocking/NonBlocking&lt;/h2&gt;

&lt;p&gt;Blocking/NonBlocking은 호출되는 함수가 바로 리턴하느냐 마느냐가 관심사다.&lt;/p&gt;

&lt;p&gt;호출된 함수가 바로 리턴해서 호출한 함수에게 제어권을 넘겨주고, 호출한 함수가 다른 일을 할 수 있는 기회를 줄 수 있으면 NonBlocking이다.&lt;/p&gt;

&lt;p&gt;그렇지 않고 호출된 함수가 자신의 작업을 모두 마칠 때까지 호출한 함수에게 제어권을 넘겨주지 않고 대기하게 만든다면 Blocking이다.&lt;/p&gt;

&lt;p&gt;각각의 case에 따라 그림을 그려보면 아래와 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/44635266/68367180-75116900-0178-11ea-84dd-e9467b233eec.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Case마다 실생활 예제를 잘 해논 블로그가 있어서 글의 내용과 주소를 달아놓겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://musma.github.io/2019/04/17/blocking-and-synchronous.html&quot;&gt;동기와 비동기, 그리고 블럭과 넌블럭&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;case-study&quot;&gt;Case Study&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Blocking &amp;amp; Synchronous&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;나 : 대표님, 개발자 좀 더 뽑아주세요..
대표님 : 오케이, 잠깐만 거기 계세요!
나 : …?!!
대표님 : (채용 공고 등록.. 지원자 연락.. 면접 진행.. 연봉 협상..)
나 : (과정 지켜봄.. 궁금함.. 어차피 내 일 하러는 못 가고 계속 서 있음)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Blocking &amp;amp; Asynchronous&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;나 : 대표님, 개발자 좀 더 뽑아주세요..
대표님 : 오케이, 잠깐만 거기 계세요!
나 : …?!!
대표님 : (채용 공고 등록.. 지원자 연락.. 면접 진행.. 연봉 협상..)
나 : (안 궁금함.. 지나가는 말로 여쭈었는데 붙잡혀버림.. 딴 생각.. 못 가고 계속 서 있음)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;*Non-blocking &amp;amp; Synchronous&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;나 : 대표님, 개발자 좀 더 뽑아주세요..
대표님 : 알겠습니다. 가서 볼 일 보세요.
나 : 넵!
대표님 : (채용 공고 등록.. 지원자 연락.. 면접 진행.. 연봉 협상..)
나 : 채용하셨나요?
대표님 : 아직요.
나 : 채용하셨나요?
대표님 : 아직요.
나 : 채용하셨나요?
대표님 : 아직요~!!!!!!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Non-blocking &amp;amp; Asynchronous&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;나 : 대표님, 개발자 좀 더 뽑아주세요..
대표님 : 알겠습니다. 가서 볼 일 보세요.
나 : 넵!
대표님 : (채용 공고 등록.. 지원자 연락.. 면접 진행.. 연봉 협상..)
나 : (열일중..)
대표님 : 한 분 모시기로 했습니다~!
나 : 😍
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>ahg223</name></author><category term="Synchronous" /><category term="Asynchronous" /><category term="Blocking" /><category term="NonBlocking" /><summary type="html">Synchronous / Asynchronous</summary></entry><entry><title type="html">proxy server</title><link href="http://localhost:4000/moderncs/proxy/" rel="alternate" type="text/html" title="proxy server" /><published>2019-11-05T00:00:00+09:00</published><updated>2019-11-05T00:00:00+09:00</updated><id>http://localhost:4000/moderncs/proxy</id><content type="html" xml:base="http://localhost:4000/moderncs/proxy/">&lt;h2 id=&quot;프록시란&quot;&gt;프록시란&lt;/h2&gt;
&lt;p&gt;&lt;img width=&quot;715&quot; alt=&quot;스크린샷 2019-11-08 오후 10 42 09&quot; src=&quot;https://user-images.githubusercontent.com/34998051/68480804-010aba00-0279-11ea-8976-1fb9ae9a62ff.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프록시란, “대리”라는 의미이다. 보안 상의 이유로 직접 통신할 수 없는 경우, 그 사이에서 중계기로 대리 통신 역할을 수행하는 서버를 프록시 서버라고도 부른다. 이런 프록시 서버는 클라이언트 입장에서 보면 원격 서버같고, 서버 입장에서는 클라이언트와 같다.&lt;/p&gt;

&lt;p&gt;하지만 프록시 서버는 단순 보안 용도로만 사용하지 않는다. 프록시 서버는 캐시 역할도 하는데, 캐시 안에 있는 정보를 요구하는 요청에는 원격 서버에 통신을 보내지 않고 프록시 서버 캐시의 데이터를 보낸다. 이로 인해 불필요한 외부와의 연결을 줄이고, 트래픽을 줄여 네트워크 병목 현상을 줄이는데 기여하기도 한다.&lt;/p&gt;

&lt;h2 id=&quot;forward-프록시&quot;&gt;Forward 프록시&lt;/h2&gt;
&lt;p&gt;클라이언트 호스트들의 내부망에 프록시 서버를 위치시킨다. 이 서버는 원격 서버로부터 요청된 리소스를 가져와 사용자에게 돌려주며, 캐시된 데이터를 요청시 해당 데이터를 바로 제공한다. 클라이언트들은 웹 브라우저를 통해 프록시 설정을 해야 사용할 수 있어 프록시 서버를 사용 중이라는 것을 인식하고 있다.&lt;/p&gt;

&lt;h2 id=&quot;reverse-프록시&quot;&gt;Reverse 프록시&lt;/h2&gt;
&lt;p&gt;인터넷 리소스 바로 앞에 프록시 서버를 위치시킨다. 이 경우에 클라이언트 들은 프록시 서버에 연결되었음을 알 수 없어 요청 리소스에 직접 접근하는 것 같이 느끼게 된다. 이러한 구조를 사용하는 이유는 보안 때문이다. 주로 DMZ에 이러한 프록시를 두고, 서버측과 통신한 결과만을 클라이언트에게 제공하는 방식으로 운영된다. 이러한 방식으로 서버 네트워크에 불법으로 연결을 시도하는 누군가가 있다면, DMZ에서 가로막히게 된다.&lt;/p&gt;</content><author><name>ahg223</name></author><category term="ModernCS" /><summary type="html">프록시에 대하여</summary></entry><entry><title type="html">docker vs k8s</title><link href="http://localhost:4000/moderncs/docker-k8s/" rel="alternate" type="text/html" title="docker vs k8s" /><published>2019-11-05T00:00:00+09:00</published><updated>2019-11-05T00:00:00+09:00</updated><id>http://localhost:4000/moderncs/docker-k8s</id><content type="html" xml:base="http://localhost:4000/moderncs/docker-k8s/">&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/34998051/68453927-4fe52f00-023a-11ea-81f5-e47fa2b22f15.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;컨테이너와 오케스트레이션이란?&lt;br /&gt;
컨테이너는 하드웨어의 복제본을 필요하지 않게 함으로써 가상머신과 같이 특정 환경을 몇 초만에 구성하고 정지시켜준다.&lt;br /&gt;
컨테이너가 위와 같은 장점이 있고, 소규모 컨테이너를 실험해보고 싶다면 도커 만으로도 충분하다. 하지만 정식 서비스를 운영하기 위해 데이터베이스, 웹 프론트엔드, 미들웨어, 백엔드 등 여러 컨테이너로 하나의 애플리케이션을 구성하는 경우는 어떠할까? 하나의 앱을 구성하는 것도 쉽지 않은데 이 모든 것의 상태와 통신, 그리고 에러 및 로그를 실시간으로 보는 것은 불가능하다. 그렇기에 나온 컨테이너 관리 툴이 바로 오케스트레이션이다.&lt;/p&gt;

&lt;p&gt;docker란?&lt;br /&gt;
컨테이너를 사용자 친화적이고 개발자 친화적인 환경으로 구성한 오픈소스이다. 도커 덕분에 컨테이너 이미지를 생성할 때 고려해야 할 점이 비할 수 없이 간편해졌고, 도커 허브와 같은 플랫폼을 통해 이미지 관리 및 공유가 편리해졌다.&lt;/p&gt;

&lt;p&gt;위와 같은 성격 덕분에 도커는 엄청난 확장성, 격리성, 이식성을 갖게 되었다.&lt;br /&gt;
확장성 - 수요가 짐작이 가지 않는 환경에서 관리자는 그 수요에 따라 컨테이너화 된 앱의 인스턴스를 시시각각 변화시켜야 한다. 도커는 이를 가능하게 한다.&lt;br /&gt;
격리성 - 같은 앱이라도 다른 버전을 띄워 특정 앱들과만 통신해야할 때가 있다. 예를들면 MySQL ver5.5이 필요한 A, B 앱이 있고 MySQL ver5.7이 필요한 C, D 앱이 있다면 이 6가지 앱은 격리될 필요가 있다. 혹은 기반 시스템을 깨끗하게 유지하기 위해서도 필요할 때가 많다.&lt;br /&gt;
이식성 - 같은 앱을 여러 환경에서 구동하고, 환경마다 달라지는 구성을 복제할 때 유용하다.&lt;/p&gt;

&lt;p&gt;kubernetes란?&lt;br /&gt;
구글 클라우드 서비스에서 사용 중인 오케스트레이션 툴이다. 컨테이너가 크루즈 선의 승객이라면, 도커는 최고의 승객 안내 요원이고 쿠버네티스는 그러한 크루즈 선의 선장이라고 할 수 있다. 개발자가 각 컨테이너의 네트워킹 및 스토리지 사용 방식 등의 세부 정보만 정의해준다면 쿠버네티스가 런타임에서 나머지 부분을 전부 처리해준다.&lt;/p&gt;</content><author><name>ahg223</name></author><category term="Cloud" /><category term="Docker" /><category term="Kubernetes" /><summary type="html">difference between them</summary></entry></feed>